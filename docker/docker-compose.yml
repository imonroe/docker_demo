version: "2"
services:
  portainer:
    image: portainer/portainer
    container_name: portainer
    restart: always
    command: --templates http://templates/templates.json
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - ${USERDIR}/docker/shared:/shared
    environment:
      - TZ=${TZ}
  web:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ${USERDIR}/docker/nginx/code:/code
      - ${USERDIR}/docker/nginx/config/site.conf:/etc/nginx/conf.d/site.conf
    restart: always
  php7.2:
    build:
      context: ./php7.2
      dockerfile: Dockerfile
      args:
        - PHP_VERSION=7.2
        - INSTALL_XDEBUG=true
        - INSTALL_BLACKFIRE=false
        - INSTALL_SOAP=false
        - INSTALL_IMAP=false
        - INSTALL_MONGO=false
        - INSTALL_AMQP=false
        - INSTALL_MSSQL=false
        - INSTALL_ZIP_ARCHIVE=true
        - INSTALL_BCMATH=true
        - INSTALL_GMP=false
        - INSTALL_PHPREDIS=true
        - INSTALL_MEMCACHED=true
        - INSTALL_OPCACHE=true
        - INSTALL_EXIF=false
        - INSTALL_AEROSPIKE=false
        - INSTALL_MYSQLI=true
        - INSTALL_PGSQL=false
        - INSTALL_PG_CLIENT=false
        - INSTALL_TOKENIZER=true
        - INSTALL_INTL=false
        - INSTALL_GHOSTSCRIPT=false
        - INSTALL_LDAP=false
        - INSTALL_SWOOLE=false
        - INSTALL_IMAGE_OPTIMIZERS=false
        - INSTALL_IMAGEMAGICK=false
    volumes:
      - ${USERDIR}/docker/nginx/code:/code
      - ${USERDIR}/docker/php7.2/php72.ini:/usr/local/etc/php/php.ini  
    restart: always
  php7.0:
    build:
      context: ./php7.0
      dockerfile: Dockerfile
      args:
        - PHP_VERSION=7.0
        - INSTALL_XDEBUG=true
        - INSTALL_BLACKFIRE=false
        - INSTALL_SOAP=false
        - INSTALL_IMAP=false
        - INSTALL_MONGO=false
        - INSTALL_AMQP=false
        - INSTALL_MSSQL=false
        - INSTALL_ZIP_ARCHIVE=true
        - INSTALL_BCMATH=true
        - INSTALL_GMP=false
        - INSTALL_PHPREDIS=true
        - INSTALL_MEMCACHED=true
        - INSTALL_OPCACHE=true
        - INSTALL_EXIF=false
        - INSTALL_AEROSPIKE=false
        - INSTALL_MYSQLI=true
        - INSTALL_PGSQL=false
        - INSTALL_PG_CLIENT=false
        - INSTALL_TOKENIZER=true
        - INSTALL_INTL=false
        - INSTALL_GHOSTSCRIPT=false
        - INSTALL_LDAP=false
        - INSTALL_SWOOLE=false
        - INSTALL_IMAGE_OPTIMIZERS=false
        - INSTALL_IMAGEMAGICK=false
    volumes:
      - ${USERDIR}/docker/nginx/code:/code
      - ${USERDIR}/docker/php7.0/php70.ini:/usr/local/etc/php/php.ini  
    restart: always
  redis:
    container_name: redis
    image: redis
    volumes:
      - ${USERDIR}/docker/redis/data:/data
    restart: always
  mysql:
    image: mysql
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    volumes:
      - ${USERDIR}/docker/mysql/data:/var/lib/mysql
    restart: always
    mem_limit: 500000000
    memswap_limit: 500000000
  drupal_8:
    image: drupal:8-apache
    container_name: drupal
    ports:
      - "5050:80"
    volumes:
      - ${USERDIR}/docker/drupal/modules:/var/www/html/modules
      - ${USERDIR}/docker/drupal/profiles:/var/www/html/profiles
      - ${USERDIR}/docker/drupal/themes:/var/www/html/themes
      # this takes advantage of the feature in Docker that a new anonymous
      # volume (which is what we're creating here) will be initialized with the
      # existing content of the image at the same location
      - ${USERDIR}/docker/drupal/sites:/var/www/html/sites
    restart: always
  postgres:
    image: postgres:10
    environment:
      POSTGRES_PASSWORD: example
    restart: always

  kanboard:
    image: kanboard/kanboard:latest
    ports:
     - "11111:80"
     - "11112:443"
    volumes:
     - ${USERDIR}/docker/kanboard/data:/var/www/app/data
     - ${USERDIR}/docker/kanboard/plugins:/var/www/app/plugins
     - ${USERDIR}/docker/kanboard/ssl:/etc/nginx/ssl


    
#      - sshvolume:<path-in-docker>
    

#volumes:
#  sshvolume:
#    driver: vieux/sshfs
#    driver_opts:
#      sshcmd: <user>@<host>:<path-in-host>
#      password: <password>


